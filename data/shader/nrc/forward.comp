#version 460
#include "common.glsl"

// Row major
void LoadNeuralRayFromImages(const uint batchIndex, const uint sampleIndex, out vec3 rayOrigin, out vec3 rayDir)
{
	const uint linearIndex = (batchIndex * BATCH_SIZE) + sampleIndex;
	const uint y = linearIndex / RENDER_WIDTH;
	const uint x = linearIndex % RENDER_WIDTH;
	const ivec2 imageCoord = ivec2(x, y);
	rayOrigin = imageLoad(nrcNeuralRayOriginImage, imageCoord).xyz;
	rayDir = imageLoad(nrcNeuralRayDirImage, imageCoord).xyz;
}

float rayEncoding[INPUT_FEATURE_COUNT];

void EncodeRay()
{
	
}

void main()
{
	const uint batchIndex = gl_GlobalInvocationID.x;

	fcoopmatNV<32, gl_ScopeSubgroup, LAYER_WIDTH, LAYER_WIDTH> weights = fcoopmatNV<32, gl_ScopeSubgroup, LAYER_WIDTH, LAYER_WIDTH>(2.0);
	fcoopmatNV<32, gl_ScopeSubgroup, LAYER_WIDTH, BATCH_SIZE> batch = fcoopmatNV<32, gl_ScopeSubgroup, LAYER_WIDTH, BATCH_SIZE>(1.0);
	fcoopmatNV<32, gl_ScopeSubgroup, LAYER_WIDTH, BATCH_SIZE> biases = fcoopmatNV<32, gl_ScopeSubgroup, LAYER_WIDTH, BATCH_SIZE>(2.0);
	fcoopmatNV<32, gl_ScopeSubgroup, LAYER_WIDTH, BATCH_SIZE> result = fcoopmatNV<32, gl_ScopeSubgroup, LAYER_WIDTH, BATCH_SIZE>(0.0);

	result = coopMatMulAddNV(weights, batch, biases);
}
