#version 460
#define NRC
#include "common.glsl"

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

void StoreNrcInferInput(const uint linearPixelIndex, const vec3 pos, const vec3 dir)
{
	// Norm pos
	const vec3 normPos = (pos / skySize) + (skySize / 2.0);

	// Calc dir
	const float theta = atan(dir.z, dir.x);
	const float normTheta = (theta / PI) + 0.5;
	const float phi = acos(dir.y / length(dir.xz));
	const float normPhi = phi / PI;

	// Store infer input
	nrcInferInput[linearPixelIndex].posX = normPos.x;
	nrcInferInput[linearPixelIndex].posY = normPos.y;
	nrcInferInput[linearPixelIndex].posZ = normPos.z;
	nrcInferInput[linearPixelIndex].theta = normTheta;
	nrcInferInput[linearPixelIndex].phi = normPhi;
}

void main()
{
	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y;
	const ivec2 imageCoord = ivec2(x, y);

	// Map 2D image coordinates to 1D infer buffer coordinate
	const uint linearPixelIndex = GetLinearPixelIndex(x, y, RENDER_WIDTH, RENDER_HEIGHT, INFER_BATCH_SIZE_HORIZONTAL, INFER_BATCH_SIZE_VERTICAL);

//	vec4 primaryRayColor = imageLoad(primaryRayColorImage, imageCoord);
//	primaryRayColor.r += sqrt(float(linearPixelIndex)) / sqrt(float(RENDER_HEIGHT * RENDER_WIDTH));
//	imageStore(primaryRayColorImage, imageCoord, primaryRayColor);

	// Check if volume was hit
	const vec4 primaryRayInfo = imageLoad(primaryRayInfoImage, imageCoord);
	const bool didScatter = primaryRayInfo.x == 1.0;
	if (!didScatter) { return; }

	// Store neural ray info
	const vec3 rayOrigin = imageLoad(nrcRayOriginImage, imageCoord).xyz;
	const vec3 rayDir = imageLoad(nrcRayDirImage, imageCoord).xyz;
	StoreNrcInferInput(linearPixelIndex, rayOrigin, rayDir);

	// Increment batch valid sample counter
	const uint inferBatchCountHorizontal = uint(ceil(float(RENDER_WIDTH) / INFER_BATCH_SIZE_HORIZONTAL));
	const uint batchIndexVertical = y / INFER_BATCH_SIZE_VERTICAL;
	const uint batchIndexHorizontal = x / INFER_BATCH_SIZE_HORIZONTAL;
	const uint linearBatchIndex = batchIndexVertical * inferBatchCountHorizontal + batchIndexHorizontal;
	if (nrcInferFilter[linearBatchIndex] == 0) { atomicAdd(nrcInferFilter[linearBatchIndex], 1); }
}
