#version 450

layout(set = 0, binding = 0) readonly buffer MatrixA
{
    uint rowCount;
    uint colCount;
    float data[];
} matrixA;

layout(set = 0, binding = 1) readonly buffer MatrixB
{
    uint rowCount;
    uint colCount;
    float data[];
} matrixB;

layout(set = 0, binding = 2) writeonly buffer MatrixC
{
    float data[];
} matrixC;

void main()
{
    // Get row / col / counts
    const uint outRow = gl_GlobalInvocationID.x;
    const uint outCol = gl_GlobalInvocationID.y;

    const uint outRowCount = matrixA.rowCount;
    const uint outColCount = matrixB.colCount;
    
    // ASSERT: matrixA.colCount == matrixB.rowCount;

    // Check row and col
    if (outRow >= outRowCount || outCol >= outColCount)
        return;

    // Matrix multiplication A * B
    float dotProduct = 0.0;
    
    for (uint i = 0; i < matrixB.rowCount; i++)
    {
        float leftVal = matrixA.data[outRow * matrixA.colCount + i];
        float rightVal = matrixB.data[i * matrixB.colCount + outCol];
        dotProduct += leftVal * rightVal;
    }

    matrixC.data[outRow * outColCount + outCol] = dotProduct;
}